/*
Adding two matrices 
Basic Accuracy: 48.2% Submissions: 28844 Points: 1

The Addition is one of the easiest operations to carry out. The same holds true for matrices. Two matrices can be added only if they have the same dimensions. The elements at similar positions get added.
Given two matrices A and B having (n1 x m1) and (n2 x m2) dimensions respectively. Add A and B. 

Example 1:
Input:
n1 = 2, m1 = 3
A[][] = {{1, 2, 3},
         {4, 5, 6}}

n2 = 2, m2 = 3
B[][] = {{1, 3, 3},
         {2, 3, 3}}

Output: 2 5 6 6 8 9
Explanation:
The summation matrix of A and B is:
res[][] = {{2, 5, 6},
           {6, 8, 9}}
The output is generated by traversing each
row sequentially.

Example 2:
Input:
n1 = 3, m1 = 2
A[][] = {{1, 2},
         {3, 4}, 
         {5, 6}}

n2 = 3, m2 = 2
B[][] = {{1, 3},
          {3, 2},
         {3, 3}}
Output: 2 5 6 6 8 9
 
Your Task:
You don't need to read input or print anything. Complete the function sumMatrix() that takes A and B as input parameters and returns a matrix containing their sum. If the addition is not possible return an empty matrix (of size zero).

Expected Time Complexity: O(n1 * m1)
Expected Auxiliary Space: O(n1 * m1) for the resultant matrix only. 

Constraints:
1 <= n1, m1, n2, m2 <= 30
0 <= Ai, Bi <= 100*/

// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GFG
{
    public static void main(String args[])throws IOException
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n1 = sc.nextInt();
            int m1 = sc.nextInt();
            
            int A[][] = new int[n1][m1];
            for(int i = 0; i < n1; i++)
                for(int j = 0; j < m1; j++)
                    A[i][j] = sc.nextInt();

            int n2 = sc.nextInt();
            int m2 = sc.nextInt();
            int B[][] = new int[n2][m2];
            for(int i = 0; i < n2; i++)
                for(int j = 0; j < m2; j++)
                    B[i][j] =sc.nextInt();

            Solution ob = new Solution();
            int ans[][] = ob.sumMatrix(A,B);
            if(ans.length == 0)
                System.out.println(-1);
            else
            {
                for(int i = 0; i < ans.length; i++)
                for(int j = 0; j < ans[0].length; j++)
                    System.out.print(ans[i][j] +" "); 
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends
//User function Template for Java

class Solution
{
    //Function to add two matrices.
    static int[][] sumMatrix(int A[][], int B[][])
    {
       // code here
       int n1 = A.length, m1 = A[0].length, n2 = B.length, m2 = B[0].length;
       if(n1 != n2 || m1 != m2){
           int mat[][] = new int[1][1];
           mat[0][0] = -1;
           return mat;
       }
       int mat[][] = new int[n1][m1];
       for(int i=0; i<n1; i++){
           for(int j=0; j<m1; j++){
               mat[i][j] = A[i][j]+B[i][j];
           }
       }
       return mat;
    }
}

//Total Time Taken: 0.6/1.2